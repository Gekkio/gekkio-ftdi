/* automatically generated by rust-bindgen */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(clippy::all)]

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __time_t = ::std::os::raw::c_long;
pub type __suseconds_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub const ftdi_chip_type_TYPE_AM: ftdi_chip_type = 0;
pub const ftdi_chip_type_TYPE_BM: ftdi_chip_type = 1;
pub const ftdi_chip_type_TYPE_2232C: ftdi_chip_type = 2;
pub const ftdi_chip_type_TYPE_R: ftdi_chip_type = 3;
pub const ftdi_chip_type_TYPE_2232H: ftdi_chip_type = 4;
pub const ftdi_chip_type_TYPE_4232H: ftdi_chip_type = 5;
pub const ftdi_chip_type_TYPE_232H: ftdi_chip_type = 6;
pub const ftdi_chip_type_TYPE_230X: ftdi_chip_type = 7;
pub type ftdi_chip_type = u32;
pub const ftdi_parity_type_NONE: ftdi_parity_type = 0;
pub const ftdi_parity_type_ODD: ftdi_parity_type = 1;
pub const ftdi_parity_type_EVEN: ftdi_parity_type = 2;
pub const ftdi_parity_type_MARK: ftdi_parity_type = 3;
pub const ftdi_parity_type_SPACE: ftdi_parity_type = 4;
pub type ftdi_parity_type = u32;
pub const ftdi_stopbits_type_STOP_BIT_1: ftdi_stopbits_type = 0;
pub const ftdi_stopbits_type_STOP_BIT_15: ftdi_stopbits_type = 1;
pub const ftdi_stopbits_type_STOP_BIT_2: ftdi_stopbits_type = 2;
pub type ftdi_stopbits_type = u32;
pub const ftdi_bits_type_BITS_7: ftdi_bits_type = 7;
pub const ftdi_bits_type_BITS_8: ftdi_bits_type = 8;
pub type ftdi_bits_type = u32;
pub const ftdi_break_type_BREAK_OFF: ftdi_break_type = 0;
pub const ftdi_break_type_BREAK_ON: ftdi_break_type = 1;
pub type ftdi_break_type = u32;
pub const ftdi_mpsse_mode_BITMODE_RESET: ftdi_mpsse_mode = 0;
pub const ftdi_mpsse_mode_BITMODE_BITBANG: ftdi_mpsse_mode = 1;
pub const ftdi_mpsse_mode_BITMODE_MPSSE: ftdi_mpsse_mode = 2;
pub const ftdi_mpsse_mode_BITMODE_SYNCBB: ftdi_mpsse_mode = 4;
pub const ftdi_mpsse_mode_BITMODE_MCU: ftdi_mpsse_mode = 8;
pub const ftdi_mpsse_mode_BITMODE_OPTO: ftdi_mpsse_mode = 16;
pub const ftdi_mpsse_mode_BITMODE_CBUS: ftdi_mpsse_mode = 32;
pub const ftdi_mpsse_mode_BITMODE_SYNCFF: ftdi_mpsse_mode = 64;
pub const ftdi_mpsse_mode_BITMODE_FT1284: ftdi_mpsse_mode = 128;
pub type ftdi_mpsse_mode = u32;
pub const ftdi_interface_INTERFACE_ANY: ftdi_interface = 0;
pub const ftdi_interface_INTERFACE_A: ftdi_interface = 1;
pub const ftdi_interface_INTERFACE_B: ftdi_interface = 2;
pub const ftdi_interface_INTERFACE_C: ftdi_interface = 3;
pub const ftdi_interface_INTERFACE_D: ftdi_interface = 4;
pub type ftdi_interface = u32;
pub const ftdi_module_detach_mode_AUTO_DETACH_SIO_MODULE: ftdi_module_detach_mode = 0;
pub const ftdi_module_detach_mode_DONT_DETACH_SIO_MODULE: ftdi_module_detach_mode = 1;
pub type ftdi_module_detach_mode = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftdi_transfer_control {
    pub completed: ::std::os::raw::c_int,
    pub buf: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_int,
    pub ftdi: *mut ftdi_context,
    pub transfer: *mut libusb_transfer,
}
#[test]
fn bindgen_test_layout_ftdi_transfer_control() {
    assert_eq!(
        ::std::mem::size_of::<ftdi_transfer_control>(),
        40usize,
        concat!("Size of: ", stringify!(ftdi_transfer_control))
    );
    assert_eq!(
        ::std::mem::align_of::<ftdi_transfer_control>(),
        8usize,
        concat!("Alignment of ", stringify!(ftdi_transfer_control))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_transfer_control>())).completed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_transfer_control),
            "::",
            stringify!(completed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_transfer_control>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_transfer_control),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_transfer_control>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_transfer_control),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_transfer_control>())).offset as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_transfer_control),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_transfer_control>())).ftdi as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_transfer_control),
            "::",
            stringify!(ftdi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_transfer_control>())).transfer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_transfer_control),
            "::",
            stringify!(transfer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftdi_context {
    pub usb_ctx: *mut libusb_context,
    pub usb_dev: *mut libusb_device_handle,
    pub usb_read_timeout: ::std::os::raw::c_int,
    pub usb_write_timeout: ::std::os::raw::c_int,
    pub type_: ftdi_chip_type,
    pub baudrate: ::std::os::raw::c_int,
    pub bitbang_enabled: ::std::os::raw::c_uchar,
    pub readbuffer: *mut ::std::os::raw::c_uchar,
    pub readbuffer_offset: ::std::os::raw::c_uint,
    pub readbuffer_remaining: ::std::os::raw::c_uint,
    pub readbuffer_chunksize: ::std::os::raw::c_uint,
    pub writebuffer_chunksize: ::std::os::raw::c_uint,
    pub max_packet_size: ::std::os::raw::c_uint,
    pub interface: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub in_ep: ::std::os::raw::c_int,
    pub out_ep: ::std::os::raw::c_int,
    pub bitbang_mode: ::std::os::raw::c_uchar,
    pub eeprom: *mut ftdi_eeprom,
    pub error_str: *const ::std::os::raw::c_char,
    pub module_detach_mode: ftdi_module_detach_mode,
}
#[test]
fn bindgen_test_layout_ftdi_context() {
    assert_eq!(
        ::std::mem::size_of::<ftdi_context>(),
        112usize,
        concat!("Size of: ", stringify!(ftdi_context))
    );
    assert_eq!(
        ::std::mem::align_of::<ftdi_context>(),
        8usize,
        concat!("Alignment of ", stringify!(ftdi_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).usb_ctx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(usb_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).usb_dev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(usb_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).usb_read_timeout as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(usb_read_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).usb_write_timeout as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(usb_write_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).baudrate as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(baudrate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).bitbang_enabled as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(bitbang_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).readbuffer as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(readbuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).readbuffer_offset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(readbuffer_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ftdi_context>())).readbuffer_remaining as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(readbuffer_remaining)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ftdi_context>())).readbuffer_chunksize as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(readbuffer_chunksize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ftdi_context>())).writebuffer_chunksize as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(writebuffer_chunksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).max_packet_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(max_packet_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).interface as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).index as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).in_ep as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(in_ep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).out_ep as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(out_ep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).bitbang_mode as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(bitbang_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).eeprom as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(eeprom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).error_str as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(error_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_context>())).module_detach_mode as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_context),
            "::",
            stringify!(module_detach_mode)
        )
    );
}
pub const ftdi_eeprom_value_VENDOR_ID: ftdi_eeprom_value = 0;
pub const ftdi_eeprom_value_PRODUCT_ID: ftdi_eeprom_value = 1;
pub const ftdi_eeprom_value_SELF_POWERED: ftdi_eeprom_value = 2;
pub const ftdi_eeprom_value_REMOTE_WAKEUP: ftdi_eeprom_value = 3;
pub const ftdi_eeprom_value_IS_NOT_PNP: ftdi_eeprom_value = 4;
pub const ftdi_eeprom_value_SUSPEND_DBUS7: ftdi_eeprom_value = 5;
pub const ftdi_eeprom_value_IN_IS_ISOCHRONOUS: ftdi_eeprom_value = 6;
pub const ftdi_eeprom_value_OUT_IS_ISOCHRONOUS: ftdi_eeprom_value = 7;
pub const ftdi_eeprom_value_SUSPEND_PULL_DOWNS: ftdi_eeprom_value = 8;
pub const ftdi_eeprom_value_USE_SERIAL: ftdi_eeprom_value = 9;
pub const ftdi_eeprom_value_USB_VERSION: ftdi_eeprom_value = 10;
pub const ftdi_eeprom_value_USE_USB_VERSION: ftdi_eeprom_value = 11;
pub const ftdi_eeprom_value_MAX_POWER: ftdi_eeprom_value = 12;
pub const ftdi_eeprom_value_CHANNEL_A_TYPE: ftdi_eeprom_value = 13;
pub const ftdi_eeprom_value_CHANNEL_B_TYPE: ftdi_eeprom_value = 14;
pub const ftdi_eeprom_value_CHANNEL_A_DRIVER: ftdi_eeprom_value = 15;
pub const ftdi_eeprom_value_CHANNEL_B_DRIVER: ftdi_eeprom_value = 16;
pub const ftdi_eeprom_value_CBUS_FUNCTION_0: ftdi_eeprom_value = 17;
pub const ftdi_eeprom_value_CBUS_FUNCTION_1: ftdi_eeprom_value = 18;
pub const ftdi_eeprom_value_CBUS_FUNCTION_2: ftdi_eeprom_value = 19;
pub const ftdi_eeprom_value_CBUS_FUNCTION_3: ftdi_eeprom_value = 20;
pub const ftdi_eeprom_value_CBUS_FUNCTION_4: ftdi_eeprom_value = 21;
pub const ftdi_eeprom_value_CBUS_FUNCTION_5: ftdi_eeprom_value = 22;
pub const ftdi_eeprom_value_CBUS_FUNCTION_6: ftdi_eeprom_value = 23;
pub const ftdi_eeprom_value_CBUS_FUNCTION_7: ftdi_eeprom_value = 24;
pub const ftdi_eeprom_value_CBUS_FUNCTION_8: ftdi_eeprom_value = 25;
pub const ftdi_eeprom_value_CBUS_FUNCTION_9: ftdi_eeprom_value = 26;
pub const ftdi_eeprom_value_HIGH_CURRENT: ftdi_eeprom_value = 27;
pub const ftdi_eeprom_value_HIGH_CURRENT_A: ftdi_eeprom_value = 28;
pub const ftdi_eeprom_value_HIGH_CURRENT_B: ftdi_eeprom_value = 29;
pub const ftdi_eeprom_value_INVERT: ftdi_eeprom_value = 30;
pub const ftdi_eeprom_value_GROUP0_DRIVE: ftdi_eeprom_value = 31;
pub const ftdi_eeprom_value_GROUP0_SCHMITT: ftdi_eeprom_value = 32;
pub const ftdi_eeprom_value_GROUP0_SLEW: ftdi_eeprom_value = 33;
pub const ftdi_eeprom_value_GROUP1_DRIVE: ftdi_eeprom_value = 34;
pub const ftdi_eeprom_value_GROUP1_SCHMITT: ftdi_eeprom_value = 35;
pub const ftdi_eeprom_value_GROUP1_SLEW: ftdi_eeprom_value = 36;
pub const ftdi_eeprom_value_GROUP2_DRIVE: ftdi_eeprom_value = 37;
pub const ftdi_eeprom_value_GROUP2_SCHMITT: ftdi_eeprom_value = 38;
pub const ftdi_eeprom_value_GROUP2_SLEW: ftdi_eeprom_value = 39;
pub const ftdi_eeprom_value_GROUP3_DRIVE: ftdi_eeprom_value = 40;
pub const ftdi_eeprom_value_GROUP3_SCHMITT: ftdi_eeprom_value = 41;
pub const ftdi_eeprom_value_GROUP3_SLEW: ftdi_eeprom_value = 42;
pub const ftdi_eeprom_value_CHIP_SIZE: ftdi_eeprom_value = 43;
pub const ftdi_eeprom_value_CHIP_TYPE: ftdi_eeprom_value = 44;
pub const ftdi_eeprom_value_POWER_SAVE: ftdi_eeprom_value = 45;
pub const ftdi_eeprom_value_CLOCK_POLARITY: ftdi_eeprom_value = 46;
pub const ftdi_eeprom_value_DATA_ORDER: ftdi_eeprom_value = 47;
pub const ftdi_eeprom_value_FLOW_CONTROL: ftdi_eeprom_value = 48;
pub const ftdi_eeprom_value_CHANNEL_C_DRIVER: ftdi_eeprom_value = 49;
pub const ftdi_eeprom_value_CHANNEL_D_DRIVER: ftdi_eeprom_value = 50;
pub const ftdi_eeprom_value_CHANNEL_A_RS485: ftdi_eeprom_value = 51;
pub const ftdi_eeprom_value_CHANNEL_B_RS485: ftdi_eeprom_value = 52;
pub const ftdi_eeprom_value_CHANNEL_C_RS485: ftdi_eeprom_value = 53;
pub const ftdi_eeprom_value_CHANNEL_D_RS485: ftdi_eeprom_value = 54;
pub const ftdi_eeprom_value_RELEASE_NUMBER: ftdi_eeprom_value = 55;
pub const ftdi_eeprom_value_EXTERNAL_OSCILLATOR: ftdi_eeprom_value = 56;
pub const ftdi_eeprom_value_USER_DATA_ADDR: ftdi_eeprom_value = 57;
pub type ftdi_eeprom_value = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftdi_device_list {
    pub next: *mut ftdi_device_list,
    pub dev: *mut libusb_device,
}
#[test]
fn bindgen_test_layout_ftdi_device_list() {
    assert_eq!(
        ::std::mem::size_of::<ftdi_device_list>(),
        16usize,
        concat!("Size of: ", stringify!(ftdi_device_list))
    );
    assert_eq!(
        ::std::mem::align_of::<ftdi_device_list>(),
        8usize,
        concat!("Alignment of ", stringify!(ftdi_device_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_device_list>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_device_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_device_list>())).dev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_device_list),
            "::",
            stringify!(dev)
        )
    );
}
pub const ftdi_cbus_func_CBUS_TXDEN: ftdi_cbus_func = 0;
pub const ftdi_cbus_func_CBUS_PWREN: ftdi_cbus_func = 1;
pub const ftdi_cbus_func_CBUS_RXLED: ftdi_cbus_func = 2;
pub const ftdi_cbus_func_CBUS_TXLED: ftdi_cbus_func = 3;
pub const ftdi_cbus_func_CBUS_TXRXLED: ftdi_cbus_func = 4;
pub const ftdi_cbus_func_CBUS_SLEEP: ftdi_cbus_func = 5;
pub const ftdi_cbus_func_CBUS_CLK48: ftdi_cbus_func = 6;
pub const ftdi_cbus_func_CBUS_CLK24: ftdi_cbus_func = 7;
pub const ftdi_cbus_func_CBUS_CLK12: ftdi_cbus_func = 8;
pub const ftdi_cbus_func_CBUS_CLK6: ftdi_cbus_func = 9;
pub const ftdi_cbus_func_CBUS_IOMODE: ftdi_cbus_func = 10;
pub const ftdi_cbus_func_CBUS_BB_WR: ftdi_cbus_func = 11;
pub const ftdi_cbus_func_CBUS_BB_RD: ftdi_cbus_func = 12;
pub type ftdi_cbus_func = u32;
pub const ftdi_cbush_func_CBUSH_TRISTATE: ftdi_cbush_func = 0;
pub const ftdi_cbush_func_CBUSH_TXLED: ftdi_cbush_func = 1;
pub const ftdi_cbush_func_CBUSH_RXLED: ftdi_cbush_func = 2;
pub const ftdi_cbush_func_CBUSH_TXRXLED: ftdi_cbush_func = 3;
pub const ftdi_cbush_func_CBUSH_PWREN: ftdi_cbush_func = 4;
pub const ftdi_cbush_func_CBUSH_SLEEP: ftdi_cbush_func = 5;
pub const ftdi_cbush_func_CBUSH_DRIVE_0: ftdi_cbush_func = 6;
pub const ftdi_cbush_func_CBUSH_DRIVE1: ftdi_cbush_func = 7;
pub const ftdi_cbush_func_CBUSH_IOMODE: ftdi_cbush_func = 8;
pub const ftdi_cbush_func_CBUSH_TXDEN: ftdi_cbush_func = 9;
pub const ftdi_cbush_func_CBUSH_CLK30: ftdi_cbush_func = 10;
pub const ftdi_cbush_func_CBUSH_CLK15: ftdi_cbush_func = 11;
pub const ftdi_cbush_func_CBUSH_CLK7_5: ftdi_cbush_func = 12;
pub type ftdi_cbush_func = u32;
pub const ftdi_cbusx_func_CBUSX_TRISTATE: ftdi_cbusx_func = 0;
pub const ftdi_cbusx_func_CBUSX_TXLED: ftdi_cbusx_func = 1;
pub const ftdi_cbusx_func_CBUSX_RXLED: ftdi_cbusx_func = 2;
pub const ftdi_cbusx_func_CBUSX_TXRXLED: ftdi_cbusx_func = 3;
pub const ftdi_cbusx_func_CBUSX_PWREN: ftdi_cbusx_func = 4;
pub const ftdi_cbusx_func_CBUSX_SLEEP: ftdi_cbusx_func = 5;
pub const ftdi_cbusx_func_CBUSX_DRIVE_0: ftdi_cbusx_func = 6;
pub const ftdi_cbusx_func_CBUSX_DRIVE1: ftdi_cbusx_func = 7;
pub const ftdi_cbusx_func_CBUSX_IOMODE: ftdi_cbusx_func = 8;
pub const ftdi_cbusx_func_CBUSX_TXDEN: ftdi_cbusx_func = 9;
pub const ftdi_cbusx_func_CBUSX_CLK24: ftdi_cbusx_func = 10;
pub const ftdi_cbusx_func_CBUSX_CLK12: ftdi_cbusx_func = 11;
pub const ftdi_cbusx_func_CBUSX_CLK6: ftdi_cbusx_func = 12;
pub const ftdi_cbusx_func_CBUSX_BAT_DETECT: ftdi_cbusx_func = 13;
pub const ftdi_cbusx_func_CBUSX_BAT_DETECT_NEG: ftdi_cbusx_func = 14;
pub const ftdi_cbusx_func_CBUSX_I2C_TXE: ftdi_cbusx_func = 15;
pub const ftdi_cbusx_func_CBUSX_I2C_RXF: ftdi_cbusx_func = 16;
pub const ftdi_cbusx_func_CBUSX_VBUS_SENSE: ftdi_cbusx_func = 17;
pub const ftdi_cbusx_func_CBUSX_BB_WR: ftdi_cbusx_func = 18;
pub const ftdi_cbusx_func_CBUSX_BB_RD: ftdi_cbusx_func = 19;
pub const ftdi_cbusx_func_CBUSX_TIME_STAMP: ftdi_cbusx_func = 20;
pub const ftdi_cbusx_func_CBUSX_AWAKE: ftdi_cbusx_func = 21;
pub type ftdi_cbusx_func = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct size_and_time {
    pub totalBytes: u64,
    pub time: timeval,
}
#[test]
fn bindgen_test_layout_size_and_time() {
    assert_eq!(
        ::std::mem::size_of::<size_and_time>(),
        24usize,
        concat!("Size of: ", stringify!(size_and_time))
    );
    assert_eq!(
        ::std::mem::align_of::<size_and_time>(),
        8usize,
        concat!("Alignment of ", stringify!(size_and_time))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<size_and_time>())).totalBytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(size_and_time),
            "::",
            stringify!(totalBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<size_and_time>())).time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(size_and_time),
            "::",
            stringify!(time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FTDIProgressInfo {
    pub first: size_and_time,
    pub prev: size_and_time,
    pub current: size_and_time,
    pub totalTime: f64,
    pub totalRate: f64,
    pub currentRate: f64,
}
#[test]
fn bindgen_test_layout_FTDIProgressInfo() {
    assert_eq!(
        ::std::mem::size_of::<FTDIProgressInfo>(),
        96usize,
        concat!("Size of: ", stringify!(FTDIProgressInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<FTDIProgressInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(FTDIProgressInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTDIProgressInfo>())).first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FTDIProgressInfo),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTDIProgressInfo>())).prev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FTDIProgressInfo),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTDIProgressInfo>())).current as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FTDIProgressInfo),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTDIProgressInfo>())).totalTime as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FTDIProgressInfo),
            "::",
            stringify!(totalTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTDIProgressInfo>())).totalRate as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FTDIProgressInfo),
            "::",
            stringify!(totalRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FTDIProgressInfo>())).currentRate as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FTDIProgressInfo),
            "::",
            stringify!(currentRate)
        )
    );
}
pub type FTDIStreamCallback = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *mut u8,
        length: ::std::os::raw::c_int,
        progress: *mut FTDIProgressInfo,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftdi_version_info {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub micro: ::std::os::raw::c_int,
    pub version_str: *const ::std::os::raw::c_char,
    pub snapshot_str: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ftdi_version_info() {
    assert_eq!(
        ::std::mem::size_of::<ftdi_version_info>(),
        32usize,
        concat!("Size of: ", stringify!(ftdi_version_info))
    );
    assert_eq!(
        ::std::mem::align_of::<ftdi_version_info>(),
        8usize,
        concat!("Alignment of ", stringify!(ftdi_version_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_version_info>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_version_info),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_version_info>())).minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_version_info),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_version_info>())).micro as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_version_info),
            "::",
            stringify!(micro)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_version_info>())).version_str as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_version_info),
            "::",
            stringify!(version_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftdi_version_info>())).snapshot_str as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ftdi_version_info),
            "::",
            stringify!(snapshot_str)
        )
    );
}
extern "C" {
    pub fn ftdi_init(ftdi: *mut ftdi_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_new() -> *mut ftdi_context;
}
extern "C" {
    pub fn ftdi_set_interface(
        ftdi: *mut ftdi_context,
        interface: ftdi_interface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_deinit(ftdi: *mut ftdi_context);
}
extern "C" {
    pub fn ftdi_free(ftdi: *mut ftdi_context);
}
extern "C" {
    pub fn ftdi_set_usbdev(ftdi: *mut ftdi_context, usbdev: *mut libusb_device_handle);
}
extern "C" {
    pub fn ftdi_get_library_version() -> ftdi_version_info;
}
extern "C" {
    pub fn ftdi_usb_find_all(
        ftdi: *mut ftdi_context,
        devlist: *mut *mut ftdi_device_list,
        vendor: ::std::os::raw::c_int,
        product: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_list_free(devlist: *mut *mut ftdi_device_list);
}
extern "C" {
    pub fn ftdi_list_free2(devlist: *mut ftdi_device_list);
}
extern "C" {
    pub fn ftdi_usb_get_strings(
        ftdi: *mut ftdi_context,
        dev: *mut libusb_device,
        manufacturer: *mut ::std::os::raw::c_char,
        mnf_len: ::std::os::raw::c_int,
        description: *mut ::std::os::raw::c_char,
        desc_len: ::std::os::raw::c_int,
        serial: *mut ::std::os::raw::c_char,
        serial_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_usb_get_strings2(
        ftdi: *mut ftdi_context,
        dev: *mut libusb_device,
        manufacturer: *mut ::std::os::raw::c_char,
        mnf_len: ::std::os::raw::c_int,
        description: *mut ::std::os::raw::c_char,
        desc_len: ::std::os::raw::c_int,
        serial: *mut ::std::os::raw::c_char,
        serial_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_eeprom_get_strings(
        ftdi: *mut ftdi_context,
        manufacturer: *mut ::std::os::raw::c_char,
        mnf_len: ::std::os::raw::c_int,
        product: *mut ::std::os::raw::c_char,
        prod_len: ::std::os::raw::c_int,
        serial: *mut ::std::os::raw::c_char,
        serial_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_eeprom_set_strings(
        ftdi: *mut ftdi_context,
        manufacturer: *mut ::std::os::raw::c_char,
        product: *mut ::std::os::raw::c_char,
        serial: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_usb_open(
        ftdi: *mut ftdi_context,
        vendor: ::std::os::raw::c_int,
        product: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_usb_open_desc(
        ftdi: *mut ftdi_context,
        vendor: ::std::os::raw::c_int,
        product: ::std::os::raw::c_int,
        description: *const ::std::os::raw::c_char,
        serial: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_usb_open_desc_index(
        ftdi: *mut ftdi_context,
        vendor: ::std::os::raw::c_int,
        product: ::std::os::raw::c_int,
        description: *const ::std::os::raw::c_char,
        serial: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_usb_open_bus_addr(
        ftdi: *mut ftdi_context,
        bus: u8,
        addr: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_usb_open_dev(
        ftdi: *mut ftdi_context,
        dev: *mut libusb_device,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_usb_open_string(
        ftdi: *mut ftdi_context,
        description: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_usb_close(ftdi: *mut ftdi_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_usb_reset(ftdi: *mut ftdi_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_usb_purge_rx_buffer(ftdi: *mut ftdi_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_usb_purge_tx_buffer(ftdi: *mut ftdi_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_usb_purge_buffers(ftdi: *mut ftdi_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_set_baudrate(
        ftdi: *mut ftdi_context,
        baudrate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_set_line_property(
        ftdi: *mut ftdi_context,
        bits: ftdi_bits_type,
        sbit: ftdi_stopbits_type,
        parity: ftdi_parity_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_set_line_property2(
        ftdi: *mut ftdi_context,
        bits: ftdi_bits_type,
        sbit: ftdi_stopbits_type,
        parity: ftdi_parity_type,
        break_type: ftdi_break_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_read_data(
        ftdi: *mut ftdi_context,
        buf: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_read_data_set_chunksize(
        ftdi: *mut ftdi_context,
        chunksize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_read_data_get_chunksize(
        ftdi: *mut ftdi_context,
        chunksize: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_write_data(
        ftdi: *mut ftdi_context,
        buf: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_write_data_set_chunksize(
        ftdi: *mut ftdi_context,
        chunksize: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_write_data_get_chunksize(
        ftdi: *mut ftdi_context,
        chunksize: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_readstream(
        ftdi: *mut ftdi_context,
        callback: FTDIStreamCallback,
        userdata: *mut ::std::os::raw::c_void,
        packetsPerTransfer: ::std::os::raw::c_int,
        numTransfers: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_write_data_submit(
        ftdi: *mut ftdi_context,
        buf: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> *mut ftdi_transfer_control;
}
extern "C" {
    pub fn ftdi_read_data_submit(
        ftdi: *mut ftdi_context,
        buf: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> *mut ftdi_transfer_control;
}
extern "C" {
    pub fn ftdi_transfer_data_done(tc: *mut ftdi_transfer_control) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_transfer_data_cancel(tc: *mut ftdi_transfer_control, to: *mut timeval);
}
extern "C" {
    pub fn ftdi_set_bitmode(
        ftdi: *mut ftdi_context,
        bitmask: ::std::os::raw::c_uchar,
        mode: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_disable_bitbang(ftdi: *mut ftdi_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_read_pins(
        ftdi: *mut ftdi_context,
        pins: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_set_latency_timer(
        ftdi: *mut ftdi_context,
        latency: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_get_latency_timer(
        ftdi: *mut ftdi_context,
        latency: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_poll_modem_status(
        ftdi: *mut ftdi_context,
        status: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_setflowctrl(
        ftdi: *mut ftdi_context,
        flowctrl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_setdtr_rts(
        ftdi: *mut ftdi_context,
        dtr: ::std::os::raw::c_int,
        rts: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_setdtr(
        ftdi: *mut ftdi_context,
        state: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_setrts(
        ftdi: *mut ftdi_context,
        state: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_set_event_char(
        ftdi: *mut ftdi_context,
        eventch: ::std::os::raw::c_uchar,
        enable: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_set_error_char(
        ftdi: *mut ftdi_context,
        errorch: ::std::os::raw::c_uchar,
        enable: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_eeprom_initdefaults(
        ftdi: *mut ftdi_context,
        manufacturer: *mut ::std::os::raw::c_char,
        product: *mut ::std::os::raw::c_char,
        serial: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_eeprom_build(ftdi: *mut ftdi_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_eeprom_decode(
        ftdi: *mut ftdi_context,
        verbose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_get_eeprom_value(
        ftdi: *mut ftdi_context,
        value_name: ftdi_eeprom_value,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_set_eeprom_value(
        ftdi: *mut ftdi_context,
        value_name: ftdi_eeprom_value,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_get_eeprom_buf(
        ftdi: *mut ftdi_context,
        buf: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_set_eeprom_buf(
        ftdi: *mut ftdi_context,
        buf: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_set_eeprom_user_data(
        ftdi: *mut ftdi_context,
        buf: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_read_eeprom(ftdi: *mut ftdi_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_read_chipid(
        ftdi: *mut ftdi_context,
        chipid: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_write_eeprom(ftdi: *mut ftdi_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_erase_eeprom(ftdi: *mut ftdi_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_read_eeprom_location(
        ftdi: *mut ftdi_context,
        eeprom_addr: ::std::os::raw::c_int,
        eeprom_val: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_write_eeprom_location(
        ftdi: *mut ftdi_context,
        eeprom_addr: ::std::os::raw::c_int,
        eeprom_val: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftdi_get_error_string(ftdi: *mut ftdi_context) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libusb_transfer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libusb_context {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libusb_device_handle {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ftdi_eeprom {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libusb_device {
    pub _address: u8,
}
